vim9script

augroup Vimrc
  autocmd!
augroup END
command! -nargs=+ Autocmd autocmd Vimrc <args>

$PACKPATH = expand('~/.cache/vim')

set autoindent
set background=dark
set backspace=indent,eol,nostop
set belloff=all
set breakindent
set clipboard=
set completeopt=menuone,noinsert,noselect
set expandtab
set fileencoding=utf-8
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:^\ ,trail:-
set noequalalways
set noswapfile
set packpath& packpath^=$PACKPATH
set pumheight=10
set ruler
set shiftround
set shiftwidth=0
set smartcase
set softtabstop=-1
set splitbelow
set splitright
set tabstop=2
set termguicolors
set ttimeout
set ttimeoutlen=0
set virtualedit=block
set wildignorecase
set wildmenu

cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

var minpac_dir = $PACKPATH .. '/pack/minpac/opt/minpac'
if !isdirectory(minpac_dir)
  execute '!git clone --depth 1 https://github.com/k-takata/minpac' minpac_dir
endif

packadd minpac

minpac#init()
minpac#add('k-takata/minpac', { type: 'opt' })

minpac#add('Shougo/ddc-filter-matcher_head')
minpac#add('Shougo/ddc-filter-sorter_rank')
minpac#add('Shougo/ddc-source-around')
minpac#add('Shougo/ddc-ui-native')
minpac#add('Shougo/ddc.vim')
minpac#add('machakann/vim-sandwich')
minpac#add('mattn/vim-molder')
minpac#add('mattn/vim-molder-operations')
minpac#add('rbtnn/vim-ambiwidth')
minpac#add('skk-dev/dict', { type: 'opt' })
minpac#add('vim-denops/denops.vim')
minpac#add('vim-skk/skkeleton')

var not_installed_plugins = minpac#pluglist->copy()->filter((_, val) => !isdirectory(val.dir .. '/.git'))->keys()
if !empty(not_installed_plugins)
  minpac#update(not_installed_plugins)
  finish
endif

filetype plugin indent on | syntax enable

# ambiwidth
g:ambiwidth_cica_enabled = false

# sandwich
nnoremap s <Nop>
xnoremap s <Nop>

# ddc
ddc#custom#patch_global({
  ui: 'native',
  sources: ['around'],
  sourceOptions: {
    _: {
      ignoreCase: true,
      matchers: ['matcher_head'],
      sorters: ['sorter_rank'],
      converters: [],
    },
    around: {
      mark: '[around]'
    },
    skkeleton: {
      mark: '[skkeleton]',
      matchers: ['skkeleton'],
      sorters: [],
      converters: [],
      isVolatile: true,
    },
  },
})

ddc#enable()

# skkeleton
inoremap <C-j> <Plug>(skkeleton-toggle)

def SkkeletonInit()
  var dict_dir = minpac#getpluginfo('dict').dir
  skkeleton#config({
    eggLikeNewline: true,
    globalDictionaries: [
      dict_dir .. '/SKK-JISYO.L',
    ],
  })
  skkeleton#register_keymap('input', ';', 'henkanPoint')
  skkeleton#register_kanatable('rom', {
    "z\<Space>": ["\u3000", ''],
  })
enddef

Autocmd User skkeleton-initialize-pre ++once SkkeletonInit()

# skkeleton + ddc
def SkkeletonEnable()
  b:prev_buffer_config = ddc#custom#get_buffer()
  ddc#custom#patch_buffer({ sources: ['skkeleton'] })
enddef

def SkkeletonDisable()
  var prev_buffer_config = get(b:, 'prev_buffer_config', {})
  ddc#custom#set_buffer(prev_buffer_config)
  unlet b:prev_buffer_config
enddef

Autocmd User skkeleton-enable-post SkkeletonEnable()
Autocmd User skkeleton-disable-post SkkeletonDisable()

# colors
colorscheme habamax
